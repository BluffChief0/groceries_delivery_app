// ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API / Auth =====
const API_BASE = ''; // –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç –∏ API –Ω–∞ –æ–¥–Ω–æ–º –¥–æ–º–µ–Ω–µ, –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º
const AUTH_LOGIN_URL = '/auth/jwt/login'; // –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ª–æ–≥–∏–Ω–∞ (fastapi-users)

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const state = {
  view: 'categories',
  token: localStorage.getItem('adm_token') || null,
  userEmail: localStorage.getItem('adm_user') || null,
  uploadedUrl: null, // —Å—é–¥–∞ –∫–ª–∞–¥—ë–º URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
};

// –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ fetch —Å —Ç–æ–∫–µ–Ω–æ–º
async function apiFetch(path, opts = {}) {
  const headers = opts.headers ? {...opts.headers} : {};
  if (state.token) headers['Authorization'] = `Bearer ${state.token}`;
  const resp = await fetch(API_BASE + path, {...opts, headers});
  if (resp.status === 401) {
    showAuthPanel(true);
    throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥');
  }
  return resp;
}

// ====== –ù–∞–≤–∏–≥–∞—Ü–∏—è (—Ç–∞–±—ã) ======
function switchView(view) {
  state.view = view;
  document.querySelector('header h1').textContent = ({
    categories: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
    products: '–ü—Ä–æ–¥—É–∫—Ç—ã',
    users: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
    employees: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'
  })[view] || '–ê–¥–º–∏–Ω–∫–∞';

  for (const b of document.querySelectorAll('.tab')) {
    b.classList.toggle('active', b.dataset.view === view);
  }
  for (const s of document.querySelectorAll('section[data-view]')) {
    s.classList.toggle('active', s.getAttribute('data-view') === view);
  }

  if (view === 'categories') loadCategories();
  if (view === 'products') loadProducts();
  if (view === 'users') loadUsersPlaceholder();
  if (view === 'employees') loadEmployeesPlaceholder();

  location.hash = '#' + view;
}

function initRouting() {
  const initial = location.hash?.slice(1) || 'categories';
  switchView(initial);
  window.addEventListener('hashchange', () => {
    const v = location.hash?.slice(1) || 'categories';
    switchView(v);
  });
}

// ====== Auth UI ======
function showAuthPanel(show) {
  document.getElementById('authPanel').classList.toggle('open', !!show);
}
function reflectAuth() {
  const btn = document.getElementById('loginBtn');
  const msg = document.getElementById('authMsg');
  if (state.token) {
    btn.textContent = state.userEmail ? `üë§ ${state.userEmail}` : '–ê–∫–∫–∞—É–Ω—Ç';
    msg.textContent = '–í—ã –≤–æ—à–ª–∏';
  } else {
    btn.textContent = '–í–æ–π—Ç–∏';
    msg.textContent = '';
  }
}

async function doLogin() {
  const email = document.getElementById('loginEmail').value.trim();
  const pass = document.getElementById('loginPassword').value.trim();
  const msg = document.getElementById('authMsg');
  msg.textContent = '';
  if (!email || !pass) { msg.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å'; return; }

  const body = new URLSearchParams();
  body.set('username', email);
  body.set('password', pass);

  try {
    const r = await fetch(API_BASE + AUTH_LOGIN_URL, {
      method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded'},
      body
    });
    if (!r.ok) { msg.textContent = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: HTTP ' + r.status; return; }
    let data = {};
    try { data = await r.json(); } catch {}
    const token = data.access_token || data.token || null;
    if (!token) { msg.textContent = '–ù–µ –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.'; return; }

    state.token = token;
    state.userEmail = email;
    localStorage.setItem('adm_token', token);
    localStorage.setItem('adm_user', email);
    reflectAuth();
    showAuthPanel(false);
  } catch(e) { msg.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + e.message; }
}

function doLogout() {
  state.token = null;
  state.userEmail = null;
  localStorage.removeItem('adm_token');
  localStorage.removeItem('adm_user');
  reflectAuth();
}

// ====== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ======
async function loadCategories(){
  const list = document.getElementById('list');
  list.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞...';
  try{
    const r = await apiFetch('/manage/categories');
    if(!r.ok) throw new Error('HTTP '+r.status);
    const data = await r.json();
    if(data.length === 0){
      list.innerHTML = '<div class="muted">–ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π</div>';
      return;
    }
    list.innerHTML = '';
    for(const c of data){
      const card = document.createElement('div');
      card.className = 'card';
      card.innerHTML = `
        <div class="title">
          <img class="img" src="${c.image_url}" alt="">
          <div>
            <div>${escapeHtml(c.name)}</div>
            <div class="muted" style="font-size:12px">${c.id}</div>
          </div>
        </div>
        <div style="margin-top:10px" class="row">
          <button class="danger" onclick="delCategory('${c.id}')">–£–¥–∞–ª–∏—Ç—å</button>
        </div>`;
      list.appendChild(card);
    }
  }catch(e){
    list.innerHTML = '<div class="muted">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: '+e.message+'</div>';
  }
}

async function createCategory(){
  const name = document.getElementById('name').value.trim();
  const msg = document.getElementById('msg');
  msg.textContent = '';
  if(!name){ msg.textContent = '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'; return; }
  if(!state.uploadedUrl){ msg.textContent = '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É'; return; }

  try{
    const r = await apiFetch('/manage/categories', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({name, image_url: state.uploadedUrl})
    });
    if(r.status === 201){
      document.getElementById('name').value='';
      document.getElementById('file').value='';
      const preview = document.getElementById('preview');
      preview.style.display='none'; preview.src='';
      state.uploadedUrl = null;
      await loadCategories();
      msg.textContent = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞.';
    }else{
      msg.textContent = '–û—à–∏–±–∫–∞: '+(await r.text());
    }
  }catch(e){
    msg.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: '+e.message;
  }
}

async function delCategory(id){
  if(!confirm('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) return;
  const msg = document.getElementById('msg');
  msg.textContent = '';
  try{
    const r = await apiFetch('/manage/categories/'+id, { method:'DELETE' });
    if(r.ok){
      await loadCategories();
      msg.textContent = '–£–¥–∞–ª–µ–Ω–æ.';
    }else{
      msg.textContent = '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: '+(await r.text());
    }
  }catch(e){
    msg.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: '+e.message;
  }
}

async function uploadCategoryImage(){
  const f = document.getElementById('file').files[0];
  const name = document.getElementById('name').value.trim();
  const msg = document.getElementById('msg');   // —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
  msg.textContent = '';

  if(!name){ msg.textContent = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"; return; }
  if(!f){ msg.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª."; return; }

  const fd = new FormData();
  fd.append("file", f);
  fd.append("category_name", name);

  try {
    const r = await fetch('/files/categories/upload', {method: 'POST', body: fd});
    if(!r.ok){
      msg.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP ' + r.status + ' ' + (await r.text());
      return;
    }
    const data = await r.json();
    state.uploadedUrl = data.url;

    // –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏
    const preview = document.getElementById('preview');
    preview.src = data.url;
    preview.style.display = 'inline-block';

    msg.textContent = '–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.';
  } catch(e){
    msg.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + e.message;
  }
}

// ===== –ó–∞–≥–ª—É—à–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ =====
function loadProductsPlaceholder(){
  document.getElementById('productsList').innerHTML =
    '<div class="card"><div class="muted">–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.</div></div>';
}
function loadUsersPlaceholder(){
  document.getElementById('usersList').innerHTML =
    '<div class="card"><div class="muted">–ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.</div></div>';
}
function loadEmployeesPlaceholder(){
  document.getElementById('employeesList').innerHTML =
    '<div class="card"><div class="muted">–ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.</div></div>';
}

// ===== –£—Ç–∏–ª–∏—Ç—ã =====
function escapeHtml(s){ return s.replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }

// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
function initUI(){
  document.getElementById('tabs').addEventListener('click', (e)=>{
    const btn = e.target.closest('.tab'); if(!btn) return;
    switchView(btn.dataset.view);
  });
  // auth
  document.getElementById('loginBtn').addEventListener('click', ()=> showAuthPanel(!document.getElementById('authPanel').classList.contains('open')));
  document.getElementById('doLogin').addEventListener('click', doLogin);
  document.getElementById('doLogout').addEventListener('click', ()=>{ doLogout(); showAuthPanel(false); });
  reflectAuth();

  // –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∫–Ω–æ–ø–∫–∏
//   document.getElementById('btnUpload').addEventListener('click', uploadCategoryImage);
//   document.getElementById('btnCreate').addEventListener('click', createCategory);
//   document.getElementById('btnReload').addEventListener('click', loadCategories);


    document.getElementById('btnUpload').addEventListener('click', ()=>{ console.log('upload click'); uploadCategoryImage(); });
  document.getElementById('btnCreate').addEventListener('click', ()=>{ console.log('create click'); createCategory(); });
  document.getElementById('btnReload').addEventListener('click', ()=>{ console.log('reload click'); loadCategories(); });
}

window.addEventListener('DOMContentLoaded', ()=>{
  initUI();
  initRouting();
});


async function loadProducts(){
  const box = document.getElementById('productsList');
  box.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞...';
  try{
    const r = await apiFetch('/manage/products');   // ‚Üê –¥–µ—Ä–≥–∞–µ–º –±—ç–∫–µ–Ω–¥
    if(!r.ok) throw new Error('HTTP '+r.status);
    const data = await r.json();
    if(data.length === 0){
      box.innerHTML = '<div class="muted">–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤</div>';
      return;
    }
    box.innerHTML = '';
    for (const p of data){
      const div = document.createElement('div');
      div.className = 'card';
      div.innerHTML = `
        <div class="title">
          <img class="img" src="${p.image_url || ''}" alt="">
          <div>
            <div>${escapeHtml(p.name)}</div>
            <div class="muted" style="font-size:12px">${p.id}</div>
          </div>
        </div>`;
      box.appendChild(div);
    }
  } catch(e){
    box.innerHTML = '<div class="muted">–û—à–∏–±–∫–∞: '+e.message+'</div>';
  }
  document.getElementById('pBtnUpload')?.addEventListener('click', uploadProductImage);
  document.getElementById('pBtnCreate')?.addEventListener('click', createProduct);
  document.getElementById('pBtnReload')?.addEventListener('click', loadProducts);
}